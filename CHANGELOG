[0.91.0-dev-pre](2020.03.16)(compatible)

--Additions--
1) New LeftFrame in djdict.js, now handles left-frame
using serializers.LeftFrame.
2) New JSONView to replace JsonView.

-- Changes --
1) spam_entries command now allows topic specific spamming.
2) left frame paginator is now prettier.
3) Adjusted certain functions/semantics in templates for the new LeftFrame
4) Deprecated JsonView.
5) AsyncTopicList now uses JSONView, also refactored for new LeftFrame.
6) TopicListHandler's __init__ method no longer sets up the query.
(moved to _get_data). delete_cache now has the flush parameter (see docstring).
Before this change, you needed to call the manager twice to get the actual data after
deleting. Removed fetch_cached.
7) tarihte-bugun is now precise.

--Deletions--
1) LefFrame related functions:
leftFrameReset, topicListCall, leftFramePopulate.

[0.90.0-dev-pre](2020.03.14)(compatible)

--Additions--
1) New TopicList view that uses LeftFrame
interface.
2) New file: serializers.py:
New PlainSerializer and PageSerializer (read the docstrings)
3) Move LeftFrame to serializers, it now inherits from
PlainSerializer. Now completely includes page object, thus
pagination data (serialized via PageSerializer).
4) Add deprecation flag for TopicListHandler's fetch_cached.

-- Changes --
1) Alter left_frame.html and topic_list.html to comply
with new LeftFrame api.
2) get_category_parameters no longer use empty string as the default
value as null values won't taken into consideration by LeftFrame.
3) Alter TopicListManager:
    a) year now handled via _validate_year method
    which validates the year. (the fallback value is set to 2020, no longer random).

    b) slug_identifiers is now a property method.
4) Alter _year of LeftFrameProcessor to comply with new _validate_year.

--Deletions--
1) Deleted the deprecated TopicList.

[0.89.0-dev-pre](2020.03.14)(compatible)

--Additions--
1) New 'LeftFrame' manager, an interface for TopicListManager.
From now on, ALL topic-list related views will use this common
interface.
2) Add deprecation flags to the parts that haven't been
refactored for LeftFrame usage.

-- Changes --
1) Refactored LeftFrameProcessor. Now it uses LeftFrame.

--Deletions--
1) CategoryAction follow() no longer refreshes the 'bugun'
category.

[0.88.0-dev-pre](2020.03.08)(incompatible)

--Additions--
1) Added login_required_modes for TopicEntryList, these
modes are not open to visitors.
2) Added date_created field to TopicFollowing.

-- Changes --
1) TopicFollowing is now used as a m2m field (via through).
2) Following changes were made to comply with new TopicFollowing:
-Author has_unread_topics logic
-ActivityList get_queryset method (and template)
-TopicAction follow method
-TopicEntryList following method
Notice **incompatible**: In order to migrate new structure of
TopicFollowing, makemigrations and migrate. Set timezone.now manually
for the default value of date_created.

--Deletions--
1) Remove activity_latest_entry template tag, it is
redundant with new TopicFollowing changes.

[0.87.0-dev-pre](2020.03.07)(compatible)

--Additions--
None

-- Changes --
1) Changed the logic of advanced search.

a - Instead of chaining filters and annotations, use them all at once.
    This drastically improves query speeds.
b - Instead of showing ALL counts for topic entry counts, filter based on the
    search fields.
c - nice_only now do not look for sum of vote_rates, it looks
    for a nice individual entry.

2) Revert removed queryset evaluation while caching.
(because AsyncTopicList needed a serializable object)

--Deletions--
None

[0.86.0-dev-pre](2020.03.07)(compatible)

--Additions--
1) New inclusion tag render_header_link, renders non-db header links
more neatly. (changes were made to related files)

-- Changes --
1) pagination.html now has proper selector for javascript.
2) NON_DB_SLUGS_SAFENAMES now also holds the description of
the category. Relevant changes were made to support this.
3) Add Ã§aylaklar to login required categories.

--Deletions--
1) header_links folder and its contents.

[0.85.0-dev-pre](2020.03.07)(compatible)

--Additions--
None

-- Changes --
1) Instead of using context processors, use user object
to show indicator of new message/new topic content.
2) Downgrade cookie.min.js version. Newer version doesn't
follow RFC 6265 strictly, which somehow affects the btoa functions.
Will be fixed when the stable version (3.0.x) of the library comes out.
3) Bump django to 2.2.11, user_agents to 2.1

--Deletions--
1) Context processors: message_status, following_status.

[0.84.0-dev-pre](2020.03.02)(compatible)

--Additions--
1) In mobile front-end, redundant part of the header will not be
visible as the user scrolls, allowing for better browsing experience.

-- Changes --
1) Static-import use of TIME_THRESHOLD_24H was faulty, it would
always generate the same result (threshold from first import time).
Instead used the callable utility function time_threshold.
I deem prior versions are pretty much unusable.

--Deletions--
1) TIME_THRESHOLD_24H

[0.83.0-dev-pre](2020.03.01)(compatible)

--Additions--
None

-- Changes --
1) FormPostHandlerMixin + FormMixin now reads IntegratedFormMixin.
Changes were made to the views which use FormPostHandlerMixin.
2) Use SuccessMessageMixin where applicable.

--Deletions--
1) Remove unused is_valid_topic_title filter.

[0.82.0-dev-pre](2020.02.29)(incompatible)

--Additions--
1) New manage.py command: commit_user_terminations. Set a cronjob
to this command to apply user deletions.
2) New field is_private for Author (instead of property). Private
users' profile will be hidden, they won't be shown in search results.
Their entries will have no user info. User actions do not apply to them.
It kind of creates a 'ghost' user. Primarily used as holder for anonymous
deleted users (with legacy). Set GENERIC_PRIVATEUSER_ID properly so that account
deletions works properly.
3) New AccountTerminationQueueManager, handles account termination payloads.

-- Changes --
1) Redirect admin login/logout views to custom auth views. To
ensure that login/logot utilities work as intended for administrators.
2) Template/view/model changes related to is_private or account deletion.
-> (views.json.AutoComplete, views.detail.UserProfile, includes/entry.html,
terminate.html, MessageManager, Author, Entry, Message)
Note: Models have changed to conform for account termination. These changes are
**incompatible**, run makemigrations then migrate dictionary to alter fields.
3) In TopicEntryList, a query with forward slash in search such as '@admin/'
caused HTTP 500, fixed that.
4) PRIVATE_USERS is now set in admin page.
5) Message sending test adjusted to use is_private instead of is_terminated

--Deletions--
1) Remove redundant LEGACY_ANONYMOUS option from account termination.
Freezing account and never logging in again will serve the same purpose.
Author field is_terminated was going to be used with this option, that
option is gone as well.

[0.81.0-dev-pre](2020.02.29)(compatible)

--Additions--
None

-- Changes --
1) Rename cache_retval to cached_context and change api. Now, request
as the first argument required. Add vary_on_user to cache per user.
Context processors are now cached properly using this decorator.
2) Minor code style changes

--Deletions--
None

[0.80.0-dev-pre](2020.02.29)(incompatible)

--Additions--
1) Many additions related to Account deletion process. Payloads
are not implemented yet, so the accounts actually don't get
deleted. (Frozen option is working as intended). AccountDeletionQueue
model holds the acoounts to be deleted (and frozen).
These additinos include 2 fields in Author and a brand new
model, so it is **incompatible**, run: 'makemigrations dictionary',
'migrate dictionary' consecutively so that new fields and model are created.
2) is_private property for Author. It is also related to account deletion,
but it can be used for other purposes. (via PRIVATE_USERS setting)
3) New PasswordConfirmMixin. Check docstrings.
4) ChangePassword now sends email notification to user.

-- Changes --
1) Adjusted messaging/added test so that it conforms account deletion status.
2) Fixed a bug in EmailChangeForm, it raised Http 500 when invalid e-mail
adresses such as a@a were given, now it renders properly and shows error messages.

--Deletions--
1) Remove cachers from user-varying context processors. They do
not work as intended. cache_retval will be adjusted in the next commit.

[0.79.0-dev-pre](2020.02.22)(compatible)

--Additions--
None

-- Changes --
1) TopicQueryHandler API changes. Create set_at for every cached
item. Implement cache key creation as a seperate method. Create
timeout mapper for cache timeouts. Change some method names to be
'private', as to show that they are not intended to be called
externally. This change may be **incompatible** for you if you used
this API before.
2) In context_processors use contextlib.suppress instead of
try, except: pass.
3) In utils, change **kwargs to acutal proper names.

--Deletions--
None

[0.78.0-dev-pre](2020.02.22)(compatible)

--Additions--
None

-- Changes --
1) Split TopicListManager into TopicQueryHandler and TopicListHandler.
Their names suggest what they do. Check out docstrings! This change may
be **incompatible** for you if you overrode TopicListManager.

--Deletions--
None

[0.77.0-dev-pre](2020.02.16)(compatible)

--Additions--
1) New BaseDebugCommand subclass in managements/commands,
created so that in the future it will be (a little) more flexible
to write debug-only commands.

-- Changes --
1) Use BaseDebugCommand to handle debug-only commands.

--Deletions--
None

[0.76.0-dev-pre](2020.02.15)(compatible)

--Additions--
1) New cleanup_expired command that deletes expired database
objects

-- Changes --
1) In Author model add is_active to REQUIRED_FIELDS so that
the field pops up in createsuperuser command, allowing properly
activated super user creation.
2) In project settings, add default value for SECRET_KEY to speed
up setting up development environment.
3) Alter spam_entries and spam_topics commands so that they
are not usable in production enviroment.
4) utils.parse_date_or_none now escapes arbitrary exception catching
5) UserProfile dispatch method now properly checks for tab
6) EntryUpdate dispatch method removed and moved into get_object
7) UserAction now handles actions in a more neat/proper way
8) In json views, convert dict()'s into {}'s (as it should be)
9) In TopicEntryList, alter _qs_filter, so that it can escape
prefetch_related and select_related when not required (and adjust related queries)

--Deletions--
None

[0.75.0-dev-pre](2020.02.10)(compatible)

--Additions--
1) New cache_retval decorator that caches functions
using django's low-level caching api. (used for context
processors)
2) New property of Topic, valid. Returns true for existing
objects and False for pseudo topics that are not valid with
given title.
3) List of contributors

-- Changes --
1) Context processors (except LeftFrame which is cached
internally), are now cached.
2) Changed some template rendering tags to optimize
database queries. (entry_list.html, inbox.html)
3) Altered topic manager's get_or_pseudo to comply
with new template structure of entry_list.html
4) Alter one line to reduce one query, in TopicEntryList

--Deletions--
None

[0.74.0-dev-pre](2020.02.05)(compatible)

--Additions--
1) Add default value for url_flat to prevent
KeyError on first installation.

-- Changes --
1) Up packages, django 2.2.10 from 2.2.9, django-uuslug
from 1.1.9 to 1.2.0
2) LeftFrameProcessor now handles authorization control
in a more correct way.

--Deletions--
None

[0.73.0-dev-pre](2020.02.04)(compatible)

--Additions--
1) This project now uses 2 more external libraries,
"js-cookies" in javascript and "user_agents" in Python.
2) New middleware: MobileDetectionMiddleware, detects if
the user is mobile or not and adds the bool value to the request.
(This is/will used to not render some parts of the website to mobile
users, left frame is the first example)
3) New context processor: LeftFrameProcessor
4) New b64decode_utf8_or_none utility that decodes a base 64
string into a python str object. (Used to decode cookie values)
5) New get_category_parameters utility that gets parameters for
given category slug. (Used in LeftFrameProcessor and TopicList view)
6) New DEFAULT_CATEGORY setting that identifies the category to be
loaded when the user first requests the website
7) New base64 related decoder/encoder functions in djdict.js (used
to encode/decode cookies)
8) Left frame scrollbar is now tracked.

-- Changes --
1) Left frame data now loads before the view is processed, this
way left frame data loads faster and in a more elegant way.
LeftFrameProcessor is used to fetch the data via TopicListManager.
This context processor goes hand in hand with javascript, communicating
via cookies. So left frame data is no longer maintained in localStorage.
2) "Hayvan-ara" is now cached.
3) "GÃ¼ndem" does not raise ZeroDivisionError, but it has a dummy text instead.
(Hopefully I'll implement it Soonâ¢)
4) Move left-frame to the new template file as it gets too clustered in base.html
5) Fix a bug in TopicListManager that caused extra cache key generetion
when the year parameter used with the non-tarihte bugÃ¼n slugs.
6) views.list.TopicList's year property is now cached_property as
it is acessed multiple times.
7) views.list.TopicList now uses get_category_parameters instead
of generating them in view itself
8) Changed some template fragments to be capable of handling new context
processor (particularly for determining active category)
9) Reporting template had a missing link, added that.

--Deletions--
1) Remove the function needed to get csrftoken from cookies, use
js-cookies library to fetch csrftoken instead.
2) Remove the javascript code that loaded left frame date on page
load, (used LeftFrameProcessor instead).

[0.72.0-dev-pre](2020.02.01)(compatible)

--Additions--
1) New time_threshold function in utils that returns
time difference from now.

-- Changes --
1) Some minor frontend adjustments
2) Modal templates are now permanently cached.
3) Convert all dict() instances into {} (as it should be)
4) Remove ugettext_lazy in author model.
5) test_profile_entry_counts now works properly. (added missing cases)
6) Categorize author model fields so that the model is more legible

--Deletions--
None

[0.71.0-dev-pre](2020.02.01)(compatible)

--Additions--
1) New populateSearchResults function to handle search
requests 'drily'.
2) New tags for entry content, (ara: something), #entry,
(bkz: #entry) and (bkz: @someone) (descriptions in filters.py)

-- Changes --
1) Change asterisks symbol on entry editor.
2) In djdict.js, use .text instead of .html for changing
slug safenames to prevent html injection
3) Change tag prompt descriptions.
4) Dropdown search now uses populateSearchResults
5) Revamp 'formatted' filter to look neater. Added tag
descriptions. And changed existing tag regexs to be more
accurate.
6) TopicEntryList now do not raise HTTP 500 when query
string are given for non-existing (pseudo) topics.

--Deletions--
None

[0.70.0-dev-pre](2020.01.22)(compatible)

--Additions--
1) Add url handling templatetags to handle social
and flatpage urls.
2) Add social and flatpage url settings. Set yours
properly to avoid KeyError(s).
3) Update screenshots

-- Changes --
1) Entry permalinks now show full entry, instead of
showing trimmed entry with show more button.
2) Show more button now loads properly. (Attached to
window onload function)
3) Links with blank attributes show external link indicator
only in entry content.
4) Footer is now cached permanently.

--Deletions--
None

[0.69.0-dev-pre](2020.01.21)(compatible)

--Additions--
None

-- Changes --
1) Adjusted frontend. Adjust any links with href "#" and
treat them as a button to improve accessibility and ux.
Right frame now behaves more responsively. Left frame
has no horizontal scrollbar.


--Deletions--
None

[0.68.0-dev-pre](2020.01.20)(compatible)

--Additions--
1) Add tarihte-bugun link for mobile views.

-- Changes --
1) Adjusted frontend. Set site width to 1240px, 740px
is for content and 250px for each sidebar at maximum
viewport. Class 'content' scales according to viewport at
smaller screen sides. Right frame now returns to bottom at
1092px. With this change, the site does not behave like
sphagetti in larger screens.

--Deletions--
None


[0.67.0-dev-pre](2020.01.19)(compatible)

--Additions--
1) New logentry_instance, logentry_bulk_create functions to
bulk admin logs

-- Changes --
1) Use more performant counterparts for updating and creating
bulk objects in action related views
2) Alter IntermediateAcionMixin's object_list into get_object_list()
3) Move log_admin into utils.admin

--Deletions--
1) Remove message sending in TopicMove action as it takes
too much time. It should be implemented as a background action, but
setting up celery is too much work so, I laid aside this feature.


[0.66.0-dev-pre, 0.66.1-dev-pre](2020.01.17)(compatible)

--Additions--
1) Add permission for topic move action

-- Changes --
1) Use IntermediateActionHandler for topic move (as it should be)
2) Fix a bug where users could see each others suspension info

--Deletions--
None


[0.65.0-dev-pre](2020.01.16)(incompatible)

--Additions--
1) New IntermediateActionMixin to handle admin actions easily
and to make new intermediate action creation easier
2) New IntermediateActionView, inheriths from IntermediateActionMixin
combined with PermissionRequiredMixin and View (to be used standalone)
3) New SuspendUser action to suspend users.
4) New UnsuspendUser action to lift suspension of users.
5) New get_generic_user function in utils to fetch generic superuser
6) New suspend_user.html, unsuspend_user.html templates (related to new views)
7) New InputNotInDesiredRange exception (related to IntermediateActionMixin)
8) New admin utilities module
9) New IntermediateActionHandler utility that handles admin action functions
10) New suspend_user permission

-- Changes --
1) Rename Author banned_until field to suspended_until **incompatible**
2) Rename Author is_banned property to is_suspended **incompatible**
3) TopicMove is now IntermediateActionView
4) Alter TopicMove post function so that it is more
legible and somehow more faster.
5) Alter TopicEntryList so that suspended user cannot
publish their entries (but they can create drafts)
6) Alter EntryUpdate so that suspended user cannot
publish their entries (but they can edit existing drafts)
7) Alter profile.html to include suspension information
8) Alter topic_move.html, entry_list.html, entry_update.html
so that on form submission, the submit button gets disabled
9) In novices.py use get_generic_superuser instead of fetching
it manually

--Deletions--
1) Remove Author model import from utils.settings to prevent
circular import


[0.64.0-dev-pre](2020.01.12)(compatible)

--Additions--
1) Date delimiter for TopicMove action
2) TopicMove action now logs actions
3) Success message after posting an entry

-- Changes --
1) Change log_admin's object_repr argument
2) TopicEntryList's _redirect_to_self now uses topic's
get_absolute_url method

--Deletions--
None


[0.63.0-dev-pre](2020.01.11)(compatible)

--Additions--
1) New topic action: TopicMove. It moves all entries in a topic to
desired topic.
2) New permission for Topic: move_topic (used in TopicMove)


-- Changes --
1) Use PermissionRequiredMixin in admin.novices views (as it should be)
2) In NoviceLookup use imported model attribute for novice status instead
of hard-coding them
3) Conversation.html now formats message contents
4) In views.json Vote used 'reduce' as a variable name, which shadowed the
built-in method. Renamed it to 'decrease'.


--Deletions--
None


[0.62.0-dev-pre](2020.01.11)(compatible)

--Additions--
1) Model manager tests. (test_model_managers)
2) Add self-messaging case for test_message_preferences (test_models)

-- Changes --
None

--Deletions--
None

[0.61.0-dev-pre](2020.01.09)(compatible)

--Additions--
None

-- Changes --
Use built-in unittest.mock instead of standalone mock package

--Deletions--
None

[0.60.0-dev-pre](2020.01.09)(incompatible)

--Additions--
New session backend
New session model

-- Changes --
1) Instead of django's default session backend use newly written
session model to pair users with sessinos. In future there will
be account deletion feature, which will make use of this backend.

This change is **incompatible** as you need to migrate data from
django_sessions to dictionary_pairedsessions (if you really care about
currently stored session data, otherwise nothing needs to be done except
new session model migration).

--Deletions--
None

[0.59.0-dev-pre](2020.01.08)(compatible)

--Additions--
1) Bunch of Model tests (see commit diff)

-- Changes --
None

--Deletions--
None

[0.58.0-dev-pre](2020.01.08)(compatible)

--Additions--
None

-- Changes --
1) In TopicEntryList view, 'following' function used naive datetime
object, it is now fixed to use tz aware datetime (as it should be)
2) Change default bodyattr in base.html
3) Remove redundant bodyattr block in templates (where not needed)

--Deletions--
None

[0.57.0-dev-pre](2020.01.07)(compatible)

--Additions--
1) New parse_date_or_none utility function that parses date
strings into django timezone aware datetime objects, also
allowing timedelta kwargs to calculate deltas.

-- Changes --
1) Input validaiton for havyan_ara date strings now use newly
added parse_date_or_none function
2) In TopicListManager, delete_cache method now appropriately sets
cache_exists and cache_key attributes to null values in method itself,
instead of doing it immediately after calling method.

--Deletions--
None

[0.56.0-dev-pre](2020.01.05)(compatible)

--Additions--
1) For mobile topic list view, include query string parameters
for topic urls.
2) Add missing query string parameters for desktop topic list

-- Changes --
1) Include missing slash before query string parameter in desktop
topic list
2) Minor front-end adjustment
3) Changed entry list html title so as to be more accurate
4) Change syntax of getting tarihte-bugun year in mobile topic
list view

--Deletions--
None

[0.55.0-dev-pre](2020.01.03)(compatible)

--Additions--
1) New RegexValidator for Entry

-- Changes --
1) Changed footer layout to look more promising and responsive.
2) Some form fields raised 500 when the query was empty. Fixed
those errors by adding strip() & whatsoever.
3) EntryForm form now handles errors more responsively
3) EntryForm now automatically (turkish) lowers all characters.
4) Remove erroneous chars from topic title validator

--Deletions--
None

[0.54.0-dev-pre](2020.01.02)(compatible)

--Additions--
None

-- Changes --
Adjusted frontend related fields/html classes so as to
improve responsibility. (only minor changes and fixes)

--Deletions--
None

[ 0.53.0-dev-pre](2019.12.30)(compatible)

--Additions--
1) New footer in base.html

-- Changes --
Changed the verbose name of can_activate_user permission
to 'Ã§aylak lisesine eriÅim'

Changed some css properties related to header so as to
improve responsibility

--Deletions--
Removed some css properties related to header so as to
improve responsibility

[0.52.0-dev-pre](2019.12.29)(incompatible)

--Additions--
1) Added this very CHANGELOG file

-- Changes --
1) New EntryFavorites model to create through
relationship with Author m2m field favorite_entries
Now, favorite_entries has the field 'date_created'

This is an *incompatible* change from previous versions.
Check solutions in the link below to migrate your models
https://stackoverflow.com/questions/26927705/

2) views.detail.UserProfile now sorts user's favorite
entries properly (using newly added date_created field)

-- Deletions --
1) Removed favorite_entries m2m field from AuthorAdmin